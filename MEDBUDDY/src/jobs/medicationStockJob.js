const cron = require('node-cron');
const Medication = require('../models/Medication');
const MedicationQuantityService = require('../services/medicationQuantity.service');
const mongoose = require('mongoose');

// Job ch·∫°y m·ªói 2 ti·∫øng ƒë·ªÉ ki·ªÉm tra thu·ªëc s·∫Øp h·∫øt
const medicationStockJob = cron.schedule('0 */2 * * *', async () => {
  try {
    console.log('[STOCK-JOB] B·∫Øt ƒë·∫ßu ki·ªÉm tra thu·ªëc s·∫Øp h·∫øt...');
    
    // L·∫•y t·∫•t c·∫£ thu·ªëc c√≥ s·ªë l∆∞·ª£ng <= ng∆∞·ª°ng c·∫£nh b√°o v√† ch∆∞a ƒë∆∞·ª£c c·∫£nh b√°o
    const lowStockMedications = await Medication.find({
      $expr: { $lte: ['$remainingQuantity', '$lowStockThreshold'] },
      isLowStock: false,
      remainingQuantity: { $gt: 0 } // Ch·ªâ c·∫£nh b√°o khi c√≤n thu·ªëc, kh√¥ng c·∫£nh b√°o khi h·∫øt ho√†n to√†n
    }).populate('userId');

    console.log(`[STOCK-JOB] T√¨m th·∫•y ${lowStockMedications.length} thu·ªëc s·∫Øp h·∫øt`);

    // G·ª≠i th√¥ng b√°o cho t·ª´ng thu·ªëc
    for (const medication of lowStockMedications) {
      try {
        await MedicationQuantityService.sendLowStockNotification(medication);
        
        // ƒê√°nh d·∫•u ƒë√£ c·∫£nh b√°o
        await Medication.findByIdAndUpdate(medication._id, { isLowStock: true });
        
        console.log(`[STOCK-JOB] ƒê√£ g·ª≠i th√¥ng b√°o cho thu·ªëc: ${medication.name} (${medication.remainingQuantity}/${medication.totalQuantity} vi√™n)`);
      } catch (error) {
        console.error(`[STOCK-JOB] L·ªói g·ª≠i th√¥ng b√°o cho thu·ªëc ${medication.name}:`, error);
      }
    }

    console.log(`[STOCK-JOB] ƒê√£ g·ª≠i th√¥ng b√°o cho ${lowStockMedications.length} thu·ªëc s·∫Øp h·∫øt`);
  } catch (error) {
    console.error('[STOCK-JOB] L·ªói ki·ªÉm tra thu·ªëc s·∫Øp h·∫øt:', error);
  }
}, {
  scheduled: true, // T·ª± ƒë·ªông ch·∫°y
  timezone: "Asia/Ho_Chi_Minh"
});

// Job ki·ªÉm tra thu·ªëc ƒë√£ h·∫øt ho√†n to√†n (ch·∫°y l√∫c 6h chi·ªÅu)
const outOfStockJob = cron.schedule('0 18 * * *', async () => {
  try {
    console.log('[OUT-OF-STOCK-JOB] B·∫Øt ƒë·∫ßu ki·ªÉm tra thu·ªëc ƒë√£ h·∫øt...');
    
    // L·∫•y t·∫•t c·∫£ thu·ªëc ƒë√£ h·∫øt ho√†n to√†n
    const outOfStockMedications = await Medication.find({
      remainingQuantity: 0,
      isLowStock: false
    }).populate('userId');

    console.log(`[OUT-OF-STOCK-JOB] T√¨m th·∫•y ${outOfStockMedications.length} thu·ªëc ƒë√£ h·∫øt`);

    // G·ª≠i th√¥ng b√°o cho t·ª´ng thu·ªëc
    for (const medication of outOfStockMedications) {
      try {
        const tokens = await require('../models/NotificationToken').find({ userId: medication.userId._id });
        const NotificationHistory = require('../models/NotificationHistory');
        const { sendNotification } = require('../services/fcmService');
        
        for (const tokenDoc of tokens) {
          await sendNotification(
            String(tokenDoc.deviceToken),
            'C·∫£nh b√°o: ƒê√£ h·∫øt thu·ªëc',
            `Thu·ªëc "${medication.name}" ƒë√£ h·∫øt ho√†n to√†n! Vui l√≤ng mua th√™m ngay!`,
            'default'
          );

          await NotificationHistory.create({
            userId: medication.userId._id,
            title: 'C·∫£nh b√°o: ƒê√£ h·∫øt thu·ªëc',
            body: `Thu·ªëc "${medication.name}" ƒë√£ h·∫øt ho√†n to√†n! Vui l√≤ng mua th√™m ngay!`,
            deviceToken: tokenDoc.deviceToken,
            sentAt: new Date(),
            sound: 'default'
          });
        }
        
        // ƒê√°nh d·∫•u ƒë√£ c·∫£nh b√°o
        await Medication.findByIdAndUpdate(medication._id, { isLowStock: true });
        
        console.log(`[OUT-OF-STOCK-JOB] ƒê√£ g·ª≠i th√¥ng b√°o h·∫øt thu·ªëc cho: ${medication.name}`);
      } catch (error) {
        console.error(`[OUT-OF-STOCK-JOB] L·ªói g·ª≠i th√¥ng b√°o cho thu·ªëc ${medication.name}:`, error);
      }
    }

    console.log(`[OUT-OF-STOCK-JOB] ƒê√£ g·ª≠i th√¥ng b√°o cho ${outOfStockMedications.length} thu·ªëc ƒë√£ h·∫øt`);
  } catch (error) {
    console.error('[OUT-OF-STOCK-JOB] L·ªói ki·ªÉm tra thu·ªëc ƒë√£ h·∫øt:', error);
  }
}, {
  scheduled: true, // T·ª± ƒë·ªông ch·∫°y
  timezone: "Asia/Ho_Chi_Minh"
});

// Jobs t·ª± ƒë·ªông ch·∫°y khi ƒë∆∞·ª£c import
console.log('[STOCK-JOBS] üîî Medication stock notification jobs started!');
console.log('[STOCK-JOBS] ‚è∞ Low stock check: Every 2 hours');
console.log('[STOCK-JOBS] ‚è∞ Out of stock check: Daily at 6:00 PM');
